%{

#include <iostream>
#include <string>
#include "ast.hpp"

void yyerror(std::string msg) {
    std::cerr << msg << std::endl;
    exit(EXIT_FAILURE);
}

extern int yylex();

%}

%union {
    std::string* string_value;
    double double_value;
    ExprAST* expr_t;
}

%left '+' '-'
%left '*' '/'

%token val_token var_token
%token <string_value> id_token
%token <double_value> num_token

%type <expr_t> E 

%%
Program: Program ';' Statement
| Statement ';'
;

Statement: AssignStatement;

AssignStatement:
    val_token id_token '=' E;

E:
  E '+' E {
    $$ = new AddExprAST($1, $3);
  }
  | E '-' E {
    $$ = new SubExprAST($1, $3);
  }
  | E '*' E {
    $$ = new MulExprAST($1, $3);
  }
  | E '/' E {
    $$ = new DivExprAST($1, $3);
  }
  | '(' E ')' {
    $$ = $2;
  }
  | id_token {
    $$ = new VarExprAST(*$1);
    delete $1;
  }
  | num_token {
    $$ = new ConstExprAST($1);
  }
  | id_token '(' ArgArray ')'
  ;

ArgArray: 
    ArgArray ',' E
  | E
  ;

%%

int main() {
  yyparse();
  return 0;
}

