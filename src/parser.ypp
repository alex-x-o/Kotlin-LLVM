%{

#include <iostream>
#include <cstdlib>
#include <string>
#include "sourcetree/ast.hpp"
#include "sourcetree/statement.hpp"

#include "llvm/IR/Value.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/IRBuilder.h"
#include "llvm/IR/Verifier.h"

extern FILE* yyin;

void yyerror(std::string msg) {
    std::cerr << msg << std::endl;
    exit(EXIT_FAILURE);
}

extern int yylex();

%}

%union {
    std::string* string_value;
    int int_value;
    double double_value;
    ExprAST* expr_t;
    llvm::Function* func_t;
    std::vector<std::string>* str_vec;
    std::vector<ExprAST*>* expr_vec;
    Type type_t;
    Param* param_t;
    std::vector<Param*>* param_vec;
    Statement* statement_t;
    std::vector<Statement*>* statement_vec;
    FunctionAST* func_ast_t;
    ExternalFunctionStatement* extern_func_t;
    FunctionPrototypeAST* func_proto_ast_t;
    ExpressionStatement* expr_stat_t;
    CallExprAST* call_expr_ast_t;
    VarDeclarationStatement* var_decl_stat_t;
    bool boolean_value;
}

%nonassoc '='
%nonassoc else_token
%left orl_token
%left andl_token
%left or_token
%left xor_token
%left and_token
%left shr_token
%left shl_token
%left '>' '<' ge_token le_token
%left '+' '-'
%left '*' '/' '%' range_token
%right inv_token notl_token

%token val_token var_token fun_token external_token return_token if_token else_token
%token range_token pa_token ma_token ta_token da_token moda_token print_token
%token or_token xor_token and_token shr_token shl_token inv_token until_token
%token orl_token andl_token notl_token do_token while_token for_token in_token step_token
%token int_type_token double_type_token string_type_token
%token <string_value> id_token
%token <int_value> int_token
%token <double_value> double_token
%token <string_value> str_token
%token <boolean_value> boolean_token

%type <expr_t> E IfElseExpr Step
%type <param_t> Param
%type <type_t> Type
%type <param_vec> ParamArray
%type <expr_vec> ArgArray
%type <func_ast_t> FunctionDefStatement
%type <extern_func_t> ExternalFunctionStatement
%type <func_proto_ast_t> FunctionSignature
%type <expr_stat_t> ExpressionStatement
%type <statement_t> Statement DeclareAndAssignStatement AssignStatement
%type <statement_t> IfElseStatement IfStatement WhileStatement ForStatement ForUStatement
%type <statement_vec> StatementList Block
%type <var_decl_stat_t> VarDeclarationStatement

%%
Program: StatementList {
    for (Statement* statement : *$1) {
        statement->codegen();
    }
    delete $1;
}

StatementList: StatementList StatementSeparator Statement {
                 $$ = $1;
                 $$->push_back($3);
               }
               | Statement {
                  $$ = new std::vector<Statement*>();
                  $$->push_back($1);
               }
               ;

StatementSeparator: ';' | '\n' ;

Block: '{' StatementList '}' {
    $$ = $2;
}

Statement:
    print_token E {
      $$ = new PrintStatement($2);
    }
    | VarDeclarationStatement {
      $$ = $1;
    }
    | AssignStatement {
      $$ = $1;
    }
    | DeclareAndAssignStatement {
      $$ = $1;
    }
    | FunctionDefStatement {
       $$ = $1;
    }
    | ExternalFunctionStatement {
       $$ = $1;
    }
    | ExpressionStatement {
       $$ = $1;
    }
    | return_token E {
       $$ = new ReturnStatement($2);
    }
    | IfStatement {
        $$ = $1;
    }
    | IfElseStatement {
        $$ = $1;
    }
    | WhileStatement {
        $$ = $1;
    }
    | ForUStatement {
        $$ = $1;
    }
    | ForStatement {
        $$ = $1;
    }
    | {
        $$ = new EmptyStatement();
    }
    ;

DeclareAndAssignStatement: VarDeclarationStatement '=' E {
    std::string id = $1->getId();
    auto assign_statement = new AssignStatement(id, $3);
    $$ = new DeclareAndAssignStatement($1, assign_statement);
};

VarDeclarationStatement: var_token id_token ':' Type {
    $$ = new VarDeclarationStatement(*$2, $4, true);
    delete $2;
}

AssignStatement: id_token '=' E {
    $$ = new AssignStatement(*$1, $3);
    delete $1;
}
| id_token pa_token E {
    $$ = new PlusAssignStatement(*$1, $3);
    delete $1;
}
| id_token ma_token E {
    $$ = new MinusAssignStatement(*$1, $3);
    delete $1;
}
| id_token ta_token E {
    $$ = new TimesAssignStatement(*$1, $3);
    delete $1;
}
| id_token da_token E {
    $$ = new DivAssignStatement(*$1, $3);
    delete $1;
}
| id_token moda_token E {
    $$ = new ModAssignStatement(*$1, $3);
    delete $1;
}

FunctionDefStatement: FunctionSignature '=' E {
    ReturnStatement* returnAST = new ReturnStatement($3);
    auto statements = new std::vector<Statement*>();
    statements->push_back(returnAST);
    $$ = new FunctionAST($1, statements);
}
| FunctionSignature Block {
    $$ = new FunctionAST($1, $2);
}

ExpressionStatement: E {
    $$ = new ExpressionStatement($1);
}

ExternalFunctionStatement: external_token FunctionSignature {
    $$ = new ExternalFunctionStatement($2);
}

FunctionSignature: fun_token id_token '(' ParamArray ')' ':' Type {
    $$ = new FunctionPrototypeAST(*$2, *$4, $7);
    delete $2;
    delete $4;
}

IfStatement: if_token E Block {
    $$ = new IfStatement($2, $3);
}

IfElseStatement: if_token E Block else_token Block {
    $$ = new IfElseStatement($2, $3, $5);
}

WhileStatement: while_token E Block {
    $$ = new WhileStatement($2, $3);
}

ForUStatement: for_token '(' id_token in_token int_token until_token int_token Step ')' Block {
    $$ = new ForUStatement(*$3, $5, $7, $8, $10);
    delete $3;
}

ForStatement: for_token '(' id_token in_token int_token range_token int_token Step ')' Block {
    $$ = new ForStatement(*$3, $5, $7, $8, $10);
    delete $3;
}

Step: step_token int_token {
    $$ = new IntExprAST($2);
}
| {
    $$ = new IntExprAST(1);
}

E:
  E '+' E {
    $$ = new AddExprAST($1, $3);
  }
  | E '-' E {
    $$ = new SubExprAST($1, $3);
  }
  | E '*' E {
    $$ = new MulExprAST($1, $3);
  }
  | E '/' E {
    $$ = new DivExprAST($1, $3);
  }
  | E '%' E {
    $$ = new ModExprAST($1, $3);
  }
  | E '<' E {
    $$ = new LessExprAST($1, $3);
  }
  | E '>' E {
    $$ = new GrtExprAST($1, $3);
  }
  | E le_token E {
    $$ = new LEExprAST($1, $3);
  }
  | E ge_token E {
    $$ = new GEExprAST($1, $3);
  }
  | E andl_token E {
    $$ = new AndLExprAST($1, $3);
  }
  | E orl_token E {
    $$ = new OrLExprAST($1, $3);
  }
  | notl_token E {
    $$ = new NotLExprAST($2);
  }
  | E and_token E {
    $$ = new AndExprAST($1, $3);
  }
  | E or_token E {
    $$ = new OrExprAST($1, $3);
  }
  | E xor_token E {
    $$ = new XorExprAST($1, $3);
  }
  | E shl_token E {
    $$ = new ShlExprAST($1, $3);
  }
  | E shr_token E {
    $$ = new ShrExprAST($1, $3);
  }
  | E '.' inv_token '(' ')' {
    $$ = new InvExprAST($1);
  }
  | '(' E ')' {
    $$ = $2;
  }
  | id_token {
    $$ = new VarExprAST(*$1);
    delete $1;
  }
  | int_token {
    $$ = new IntExprAST($1);
  }
  | double_token {
    $$ = new DoubleExprAST($1);
  }
  | str_token {
    $$ = new ConstStringExprAST(*$1);
    delete $1;
  }
  | boolean_token {
    $$ = new ConstBooleanExprAST($1);
  }
  | IfElseExpr {
    $$ = $1;
  }
  | id_token '(' ArgArray ')' {
    $$ = new CallExprAST(*$1, *$3);
    delete $1;
    delete $3;
  };

IfElseExpr: if_token '(' E ')' E else_token E {
    $$ = new IfElseExprAST($3, $5, $7);
}

ArgArray: 
    ArgArray ',' E {
        $$ = $1;
        $$->push_back($3);
    }
  | E {
    $$ = new std::vector<ExprAST*>();
    $$->push_back($1);
  }
  | {
    $$ = new std::vector<ExprAST*>();
  }
  ;

ParamArray:
    ParamArray ',' Param {
        $$ = $1;
        $$->push_back($3);
    }
    | Param {
        $$ = new std::vector<Param*>();
        $$->push_back($1);
    }
    | {
        $$ = new std::vector<Param*>();
    }

Param: id_token ':' Type {
    $$ = new Param(*$1, $3);
    delete $1;
}

Type: int_type_token {
        $$ = INT;
    }
    | double_type_token {
        $$ = DOUBLE;
    }
    | string_type_token {
        $$ = STRING;
    };

%%

llvm::LLVMContext context;
llvm::IRBuilder<> builder(context);
llvm::Module* module;
std::map<std::string, llvm::AllocaInst*> named_values;
llvm::Function *PrintFja;

int main() {
    yyin = fopen("../test8.kt", "r");
    module = new llvm::Module("My module", context);

    llvm::FunctionType *FT1 =
                llvm::FunctionType::get(llvm::IntegerType::getInt32Ty(context),
                llvm::PointerType::get(llvm::Type::getInt8Ty(context), 0), true);
    PrintFja = llvm::Function::Create(FT1, llvm::Function::ExternalLinkage, "printf", module);

    yyparse();

    module->print(llvm::outs(), nullptr);
    delete module;
    return 0;
}

